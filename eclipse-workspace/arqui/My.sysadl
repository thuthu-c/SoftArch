Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } } style ClientServer { invariant ClientMustConnectToServer = "self.ExistsConnectionForAll(\'AClient\', \'AServer\')" invariant ClientShouldntConnectToClient = "not(self.ExistsConnection(\'AClient\', \'AClient\'))" abstract component def AClient { } abstract component def AServer { } } style PipesFilters { invariant OnlyPipesConnectsFilters = "self.connectors->forall(cn | cn.definition.abstractConnector.name<>\'APipe\' or (cn.definition.abstractConnector.name=\'APipe\' and (checkPortUseAbstractComponent(cn.bindings->first().destination,\'AFilter\') and checkPortUseAbstractComponent(cn.bindings->first().source, \'AFilter\'))))" abstract connector def APipe { } abstract component def AFilter { } } style IoTStyle { invariant checkSensorCP = "self.checkCPRecursive(self, \'SensorCP\')" invariant checkDataStoreCP = "self.checkCPRecursive(self, \'DataStoreCP\')" invariant checkDeviceCP = "self.checkCPRecursive(self, \'DeviceCP\')" invariant checkSensorOPT = "self.checkPTRecursive(self, \'SensorOPT\')" invariant checkActuatorIPT = "not (self.checkCPRecursive(self, \'ActuatorCP\') xor self.checkPTRecursive(self, \'ActuatorIPT\'))" invariant checkDataIPT = "self.checkPTRecursive(self, \'DataIPT\')" invariant checkDataOPT = "self.checkPTRecursive(self, \'DataOPT\')" invariant checkServiceOPT = "not (self.checkCPRecursive(self, \'GatewayCP\') xor self.checkPTRecursive(self, \'ServiceOPT\'))" invariant checkDeviceIPT = "not (self.checkCPRecursive(self, \'GatewayCP\') xor self.checkPTRecursive(self, \'DeviceIPT\'))" invariant checkSensorDataCN = "self.checkCNRecursive(self, \'SensorDataCN\')" invariant checkDataStoreCN = "self.checkCNRecursive(self, \'DataStoreCN\')" invariant checkActuatorCommandCN = "not (self.checkCPRecursive(self, \'ActuatorCP\') xor self.checkCNRecursive(self, \'ActuatorCommandCN\'))" invariant checkServiceCN = "not (self.checkCPRecursive(self, \'GatewayCP\') xor self.checkCNRecursive(self, \'ServiceCN\'))" invariant checkDeviceDataCN = "not (self.checkPTRecursive(self, \'DeviceOPT\') xor self.checkCNRecursive(self, \'DeviceDataCN\'))" invariant ControllerMustBeEmbeddedInDevice = "self.ControllerCPEmbedded(self)" invariant SensorMustBeConnectedToDeviceOrController = "self.SensorConnection(self)" invariant ActuatorMustBeConnectedToDeviceOrController = "self.ActuatorConnection(self)" invariant SensorAndActuatorDontCommunicate = "self.Communication(self)" invariant SensorDataCNMustNotBeMultiplex = "self.checkBindingsRecursive(self, \'SensorDataCN\')" invariant ActuatorCommandCNMustNotBeMultiplex = "self.checkBindingsRecursive(self, \'ActuatorCommandCN\')" invariant DeviceDataCNMustNotBeMultiplex = "self.checkBindingsRecursive(self, \'DeviceDataCN\')" abstract component def SensorCP [ 1 , -1 ] { ports : SensorOPT : out any [ 1 , -1 ] } abstract component def ActuatorCP [ 0 , -1 ] { ports : ActuatorIPT : in any [ 1 , -1 ] } abstract component def DeviceCP [ 1 , -1 ] { ports : DeviceOPT : out any [ 0 , -1 ] SensorIPT : in any [ 0 , -1 ] ActuatorOPT : out any [ 0 , -1 ] ServiceIPT : in any [ 0 , -1 ] compose { SensorCP , ActuatorCP , ControllerCP , GatewayCP , DataStoreCP } } abstract component def DataStoreCP [ 1 , -1 ] { ports : DataOPT : out any [ 1 , -1 ] DataIPT : in any [ 1 , -1 ] } abstract component def ControllerCP [ 0 , -1 ] { ports : SensorIPT : in any [ 0 , -1 ] ActuatorOPT : out any [ 0 , -1 ] } abstract component def GatewayCP [ 0 , -1 ] { ports : DeviceIPT : in any [ 1 , -1 ] ServiceOPT : out any [ 1 , -1 ] ServiceIPT : in any [ 0 , -1 ] compose { DataStoreCP } } abstract component def IoTARCH { compose { SensorCP , ActuatorCP , DeviceCP , GatewayCP , DataStoreCP } } abstract connector def SensorDataCN { participants : ~ SensorOPT : out any ~ SensorIPT : in any flows : flow SensorOPT to SensorIPT } abstract connector def ActuatorCommandCN { participants : ~ ActuatorOPT : out any ~ ActuatorIPT : in any flows : flow ActuatorOPT to ActuatorIPT } abstract connector def DeviceDataCN { participants : ~ DeviceOPT : out any ~ DeviceIPT : in any flows : flow DeviceOPT to DeviceIPT } abstract connector def DataStoreCN { participants : ~ DataOPT : out any ~ DataIPT : in any flows : flow DataOPT to DataIPT } abstract connector def ServiceCN { participants : ~ ServiceOPT : out any ~ ServiceIPT : in any flows : flow ServiceOPT to ServiceIPT } abstract activity def Monitoring abstract activity def Analysis abstract activity def Planning abstract activity def Execution }